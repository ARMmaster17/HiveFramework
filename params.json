{"name":"Hive Framework","tagline":"Programming language aimed towards parallel computing","body":"# What is Hive Framework\r\n## A framework built for clusters\r\nThe Hive Framework is a light-weight framework which allows you to utilize the power of cluster computing without advanced hardware or dealing with complex libraries.\r\n\r\n## A language for everyone\r\nAll apps that run on the Hive Framework are created in the HIVIL language. It's simple enough that non-technical users like data scientists can get their work done easily, but also allows a greater degree of power to those looking for more.\r\n\r\n## Add to, not replace your existing network\r\nHive Framework supports running your pre-existing applications and performing calculations with the result. Hive Framework also has a simple way to launch HIVIL scripts from your existing applications to easily create cluster-computing functionality with minimum code impact.\r\n\r\n## Meet Auto-pilot\r\nThe Hive Framework has a module called Auto-Pilot which is here to make your life easier. Unlike other cluster software, Auto-Pilot will automatically connect your node to all the other nodes and manage syncing data across the network. All this without having to modify any settings. It can also figure out how fast (or slow) your node is compared to the rest of the hive and balance the workload accordingly. It can also account for sudden network failure and nodes going offline. Thanks to the synchronized state of HIVIL applications, another node will pick up right where the other node left off.\r\n\r\n## No magic, just standard software\r\nHive Framework runs on top of the popular Ruby framework. This means you can run any HIVIL program on any computer that runs Ruby with no to minimum code changes. The best part is that Hive Framework has no external dependencies. Just install it to any server running Ruby and run it.\r\n\r\n## Almost invisible footprint\r\nHive Framework can run on almost any computer. To prove it, we tested large HIVIL programs on an Intel Pentium III with 256 MB of RAM. Still ran lightning fast despite taking on the entire workload solo. Because of the small footprint, you can turn all of your office computers into nodes and make use of those spare CPU cycles.\r\n\r\n# How do I get it?\r\n**DISCLAIMER: HIVE FRAMEWORK IS NOT FINISHED. STABILITY IS NOT GUARANTEED. USE AT YOUR OWN RISK.**\r\n\r\nClick one of the buttons above to download the latest version. Upon finishing, extract the files to your computer. Next install the latest version of Ruby. Then simply *cd* into your directory and run\r\n\r\n    ruby ./HiveStart.rb\r\n\r\nThat's it! If you would like a more configurable setup procedure, check out the book listed below.\r\n\r\n# System Requirements\r\n## Minimum\r\nYou probably could go lower, but here's what we tested Hive on while we developed it (operating at a reasonable speed)\r\n- Intel Pentium III 800 MHz (1 Core)\r\n- 256 MB DDR RAM\r\n- SSH Access\r\n- Debian Linux 7.x i386\r\n- Latest version of Ruby\r\n- Ethernet\r\n\r\n## Recommended\r\nThis is what our build server consisted of. This would probably be the best option for most non-enterprise users.\r\n- Intel Hex Core\r\n- 8 GB RAM\r\n- SSH Access\r\n- Docker\r\n- Ubuntu 13.04 x86_64\r\n- Latest version of Ruby\r\n- Ethernet\r\n\r\n## Optimum\r\nHere's what we recommend for more serious/enterprise users\r\n- Intel Xeon (1 CPU, Quad or better)\r\n- 4 GB RAM\r\n- SSH/VNC Access\r\n- Latest version of i686 or x86_64 Linux (Any distro that runs Ruby)\r\n- Latest version of Ruby\r\n- Dual Ethernet (Load distribution or fail-safe mode)\r\n\r\n**HIVE Framework will also work on Windows and Mac OS X, but you may need to modify your scripts for full functionality.*","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}